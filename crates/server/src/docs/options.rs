pub const OPTION_DESCRIPTION_SERVER_OUTPUT: &str = "
These two options allow you to configure where Zap will output generated code.

The paths are relative to the configuration file and should point to a lua(u) file.

### Example

```zap
opt server_output = \"src/server/zap.luau\"
opt client_output = \"src/client/zap.luau\"
```
";

pub const OPTION_DESCRIPTION_CLIENT_OUTPUT: &str = "
These two options allow you to configure where Zap will output generated code.

The paths are relative to the configuration file and should point to a lua(u) file.

### Example

```zap
opt server_output = \"src/server/zap.luau\"
opt client_output = \"src/client/zap.luau\"
```
";

pub const OPTION_DESCRIPTION_TYPES_OUTPUT: &str = "
Configures where Luau types will be output.

The path is relative to the configuration file and should point to a lua(u) file.

### Example

```zap
opt types_output = \"network/types.luau\"
```
";

pub const OPTION_DESCRIPTION_CALL_DEFAULT: &str = "
The default `call` field that will be used for events. See [call](events.html#call) for possible options.

### Example

```zap
opt call_default = \"ManySync\"
```

```zap
opt call_default = \"Polling\"
```

### Default

Requires an explicit `call` field defined on every event.
";

pub const OPTION_DESCRIPTION_REMOTE_SCOPE: &str = "
This option changes the name of the remotes generated by Zap.

### Default

```zap
opt remote_scope = \"ZAP\"
```

The generated remotes will be `ZAP_RELIABLE` and `ZAP_UNRELIABLE` respectively.

### Example

```zap
opt remote_scope = \"PACKAGE_NAME\"
```

The generated remotes will change to be `PACKAGE_NAME_RELIABLE` and `PACKAGE_NAME_UNRELIABLE` respectively.
";

pub const OPTION_DESCRIPTION_REMOTE_FOLDER: &str = "
This option changes the name folder that Zap's remotes are placed inside of ReplicatedStorage.

### Default

```zap
opt remote_folder = \"ZAP\"
```

The generated remotes will be in `ReplicatedStorage -> ZAP`.

### Example

```zap
opt remote_scope = \"CHARACTER\"
```

The generated remotes be in `ReplicatedStorage -> CHARACTER`
";

pub const OPTION_DESCRIPTION_CASING: &str = "
This option changes the casing of the API generated by Zap.

Using the `FireAll` function as an example:

- `PascalCase`: `FireAll`
- `camelCase`: `fireAll`
- `snake_case`: `fire_all`

# Information

This option does not change the casing of your event or type names. It only changes the casing of generated API functions.

### Default

`\"PascalCase\"`

### Options

- `\"camelCase\"`
- `\"PascalCase\"`
- `\"snake_case\"`

### Example

```zap
opt casing = \"camelCase\"
```
";

pub const OPTION_DESCRIPTION_WRITE_CHECKS: &str = "
This option determines if Zap should check types when writing data to the network. This is useful for development and debugging, but can see some performance hits, and should be disabled in production.

# Danger

Zap only checks types that cannot be statically checked by Luau or TypeScript.

For example, Zap will not check if a `string (20)` is a string, but it will check that the string is 20 characters long.

### Default

`true`

### Options

- `true`
- `false`

### Example

```zap
opt write_checks = true
```
";

pub const OPTION_DESCRIPTION_TYPESCRIPT: &str = "
This option determines if Zap should generate TypeScript definition files alongside generated Luau code.

When enabled, Zap will generate a `.d.ts` file for the server and client with the same paths as the generated Luau server and client.

### Default

`false`

### Options

- `true`
- `false`

### Example

```zap
opt typescript = true
```
";

pub const OPTION_DESCRIPTION_TYPESCRIPT_MAX_TUPLE_LENGTH: &str = "
The maximum non-nested length of tuples Zap can generate, with anything longer generating an array.

### Default

`10`

### Example

```zap
opt typescript_max_tuple_length = 5
```
";

pub const OPTION_DESCRIPTION_MANUAL_EVENT_LOOP: &str = "
This option determines if Zap automatically sends reliable events and functions each Heartbeat.

When enabled, the `SendEvents` function exported from the client and server modules that must be called manually.

This is useful when you can easily run `SendEvents` after all events have been fired each frame.

# Danger

At the time of writing (January 2024), Roblox has an issue where firing remotes at too high of a rate (above 60 hz) can cause the server to have incredibly high network response times.

**This causes servers to essentially crash, and all clients to disconnect.**

This can be mitigated by firing remotes to the server at a timed rate, so as to not exceed 60 hz.

```luau
local Timer = 0

RunService.Heartbeat:Connect(function(DeltaTime)
	Timer += DeltaTime

	-- Only send events 60 times per second
	if Timer >= 1 / 60 then
		Timer = 0
		Zap.SendEvents()
	end
end)
```

Note that Zap uses `RunService.Heartbeat` and a 61 hz rate by default.

### Default

`false`

### Options

- `true`
- `false`

### Example

```zap
opt manual_event_loop = true
```
";

pub const OPTION_DESCRIPTION_YIELD_TYPE: &str = "
This option changes the way functions yield in zap.

### Default

`\"yield\"`

### Options

# Information

The `\"future\"` option is not avaliable when `typescript` is enabled.

- `\"yield\"`
- `\"future\"`
- `\"promise\"`

### Example

```zap
opt yield_type = \"promise\"
```
";

pub const OPTION_DESCRIPTION_ASYNC_LIB: &str = "
# Information

This option is not required when `yield_type` is set to `yield`

# Warning

When using `typescript`, provide the path to the RuntimeLib.

This option provides the async library to Zap. The option must include a `require` statement, as it will be fed directly into the Luau code.

When using Futures, you must provide a path to [Future by red-blox](https://github.com/red-blox/Util/tree/main/libs/Future). As of writing, there are no other future libraries for Roblox.

Zap is also compatible with almost any Promise library. Some common examples are:

- [Promise by evaera](https://github.com/evaera/roblox-lua-promise/)*
- [Promise by Quenty](https://github.com/Quenty/NevermoreEngine/tree/main/src/promise)
- [Promise by red-blox](https://github.com/red-blox/Util/tree/main/libs/Promise)

<sup>*The default in roblox-ts.</sup>

### Default

The path is empty.

### Example

```zap
opt yield_type = \"promise\"
opt async_lib = \"require(game:GetService('ReplicatedStorage').Promise)\"
```
";

pub const OPTION_DESCRIPTION_TOOLING: &str = "
This option determines if Zap should generate a file to allow it to interface with other tooling.

### Default

`false`

### Example

```zap
opt tooling = true
```
";

pub const OPTION_DESCRIPTION_TOOLING_OUTPUT: &str = "
This options allows you to configure where Zap will output its generated tooling code.

The path is relative to the configuration file and should point to a lua(u) file.

### Default

```zap
opt tooling_output = \"./network/tooling.lua\"
```

### Example

```zap
opt tooling = true
opt tooling_output = \"src/ReplicatedStorage/RemoteName.profiler.luau\"
```

or

```zap
opt typescript = true
opt tooling = true
opt tooling_output = \"src/include/RemoteName.profiler.lua\"
```
";

pub const OPTION_DESCRIPTION_TOOLING_SHOW_INTERNAL_DATA: &str = "
This option will add an additional element to the start of the arguments array returned by the tooling intergration function.

### Default

`false`

### Example

```zap
opt tooling = true
opt tooling_show_internal_data = true
```
";

pub const OPTION_DESCRIPTION_DISABLE_FIRE_ALL: &str = "
This option determines if Zap should generate a `.FireAll` method on the server side. This is useful to turn off to prevent footguns if you're only ever sending events to loaded players.

### Default

`false`

### Example

```zap
opt disable_fire_all = true
```
";
